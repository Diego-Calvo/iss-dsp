#pragma checksum "C:\Users\dicalvo\source\repos\ISSWebsite\iss-dsp\ISSWeb\Views\Home\Map.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bff17b383f8b8e528a975757a67b809de80dd9d9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Map), @"mvc.1.0.view", @"/Views/Home/Map.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\dicalvo\source\repos\ISSWebsite\iss-dsp\ISSWeb\Views\_ViewImports.cshtml"
using ISSWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\dicalvo\source\repos\ISSWebsite\iss-dsp\ISSWeb\Views\_ViewImports.cshtml"
using ISSWeb.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bff17b383f8b8e528a975757a67b809de80dd9d9", @"/Views/Home/Map.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bde0c3ce91a49cd412b2611cb11c30589565e201", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Map : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\dicalvo\source\repos\ISSWebsite\iss-dsp\ISSWeb\Views\Home\Map.cshtml"
  
    ViewData["Title"] = "Space Hack";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bff17b383f8b8e528a975757a67b809de80dd9d93477", async() => {
                WriteLiteral("\r\n    <meta charset=\"utf-8\">\r\n    <title>Earth View</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n        }\r\n    </style>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bff17b383f8b8e528a975757a67b809de80dd9d94600", async() => {
                WriteLiteral(@"
    <script type=""module"">
        import * as THREE from './js/three.module.js';
        import { TrackballControls } from './js/TrackballControls.js';
        import { FBXLoader } from './js/FBXLoader.js';

        let perspectiveCamera, controls, scene, renderer;


        const frustumSize = 400;

        init();
        animate();

        function perc2color(perc) {
            let r = 0, g = 0, b = 0;
            if (perc < 50) {
                r = 255;
                g = Math.round(5.1 * perc);
            }
            else {
                g = 255;
                r = Math.round(510 - 5.10 * perc);
            }
            let h = (r * 0x10000) + (g * 0x100) + (b * 0x1);
            return h;
        }


        function signalFor(pos, power, frequency) {
            const signalLength = power;
            const signal = new THREE.Mesh(
                new THREE.ConeGeometry(100, signalLength, 32),
                new THREE.MeshPhongMaterial({ color: perc2color(");
                WriteLiteral(@"(frequency / 1000) * 100) })
            );

            signal.position.x = pos.x;
            signal.position.y = pos.y;
            signal.position.z = pos.z;

            var issPosition = pos.clone();

            // Arbitratry distance to look at
            const distance = 10000;
            var signalDirectionVector = issPosition.clone().normalize();
            var signalDirection = new THREE.Vector3(
                issPosition.x + (distance * signalDirectionVector.x),
                issPosition.y + (distance * signalDirectionVector.y),
                issPosition.z + (distance * signalDirectionVector.z));

            signal.geometry.rotateX(-Math.PI * 0.5);
            signal.geometry.translate(0, 0, signalLength / 2);
            signal.lookAt(signalDirection);

            return signal;
        }

        function init() {

            const aspect = window.innerWidth / window.innerHeight;

            perspectiveCamera = new THREE.PerspectiveCamera(45, aspect, 100");
                WriteLiteral(@", 10000000);
            perspectiveCamera.position.x = 30000;
            perspectiveCamera.up = new THREE.Vector3(0, 0, 1);

            scene = new THREE.Scene();

            scene.add(new THREE.AmbientLight(0xCCCCCC));

            // const sunDistance = 1495978.70700;

            var startTime = new Date(Date.now());
            var endTime = new Date(startTime.getTime() + 1000 * 60 * 60 * 2);

            const sphere = false;

            //fetch(`https://localhost:44336/Home/GetData?start=${startTime.toISOString()}&end=${endTime.toISOString()}`)
            fetch(`/Home/GetData?start=${startTime.toISOString()}&end=${endTime.toISOString()}`)
                .then(resp => resp.json())
                .then(res => {
                    const resp = JSON.parse(res.toLowerCase())
                    if (sphere) {                       
                        resp.result.data.forEach(dataResult => {
                            dataResult.coordinates.forEach(coordinate => {
        ");
                WriteLiteral(@"                        for (let i = 0; i < coordinate.x.length; i++) {
                                    const iss = new THREE.Mesh(
                                        new THREE.SphereGeometry(100, 32, 32),
                                        new THREE.MeshBasicMaterial({ color: 0x00eeff }));


                                    iss.position.x = coordinate.x[i];
                                    iss.position.y = coordinate.y[i];
                                    iss.position.z = coordinate.z[i];
                                    scene.add(iss);
                                    scene.add(signalFor(
                                        iss.position,
                                        (Math.random() * 900) + 100,
                                        (Math.random() * 900) + 100
                                    ));
                                }
                            });
                        });
                    }
                    else {
   ");
                WriteLiteral(@"                     const loader = new FBXLoader();

                        // https://nasa3d.arc.nasa.gov/detail/iss-6628
                        loader.load('img/ISSComplete1.fbx.txt', function (object) {
                        //loader.load('https://hackathonstg.blob.core.windows.net/fbx/ISSComplete1.fbx.txt', function (object) {
                            resp.result.data.forEach(dataResult => {
                                dataResult.coordinates.forEach(coordinate => {
                                    for (let i = 0; i < coordinate.x.length; i++) {
                                        const iss = object.clone();
                                        iss.position.x = coordinate.x[i];
                                        iss.position.y = coordinate.y[i];
                                        iss.position.z = coordinate.z[i];
                                        iss.scale.x = 100;
                                        iss.scale.y = 100;
                                ");
                WriteLiteral(@"        iss.scale.z = 100;
                                        scene.add(iss);
                                        scene.add(signalFor(
                                            iss.position,
                                            (Math.random() * 900) + 100,
                                            (Math.random() * 900) + 100
                                        ));
                                    }
                                });
                            });

                        });
                    }
                });



            const geometry = new THREE.ConeGeometry(5, 20, 32);
            const material = new THREE.MeshBasicMaterial({ color: 0xffff00 });
            const cone = new THREE.Mesh(geometry, material);
            scene.add(cone);

            // var light = new THREE.DirectionalLight(0xffffff, 1);
            // light.position.set(sunDistance, 0, 0);
            // scene.add(light);

            var textureLoader = new T");
                WriteLiteral(@"HREE.TextureLoader();

            const earthDiameter = 12742;

            var earth = new THREE.Mesh(
                new THREE.SphereGeometry(earthDiameter / 2, 64, 64),
                new THREE.MeshPhongMaterial({
                    map: textureLoader.load('img/earth4k.jpg'),
                    bumpMap: textureLoader.load('img/earth4k-bump.jpg'),
                    bumpScale: 100,
                })
            );

            earth.rotation.x = Math.PI / 2;

            scene.add(earth);

            const xAxis = new THREE.Vector3(1, 0, 0);
            const yAxis = new THREE.Vector3(0, 1, 0);
            const zAxis = new THREE.Vector3(0, 0, 1);

            const origin = new THREE.Vector3(0, 0, 0);
            const length = 20000 / 2;

            const xArrow = new THREE.ArrowHelper(xAxis, origin, length, 0xFF0000);
            const yArrow = new THREE.ArrowHelper(yAxis, origin, length, 0x00FF00);
            const zArrow = new THREE.ArrowHelper(zAxis, origin, length,");
                WriteLiteral(@" 0x0000FF);
            scene.add(xArrow);
            scene.add(yArrow);
            scene.add(zArrow);

            // renderer

            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            window.addEventListener('resize', onWindowResize);

            createControls(perspectiveCamera);

        }

        function createControls(camera) {

            controls = new TrackballControls(camera, renderer.domElement);

            controls.rotateSpeed = 1.0;
            controls.zoomSpeed = 1.2;
            controls.panSpeed = 0.8;

            controls.keys = ['KeyA', 'KeyS', 'KeyD'];

        }

        function onWindowResize() {

            const aspect = window.innerWidth / window.innerHeight;

            perspectiveCamera.aspect = aspect;
            perspectiv");
                WriteLiteral(@"eCamera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);

            controls.handleResize();

        }

        function animate() {

            requestAnimationFrame(animate);

            controls.update();

            render();

        }

        function render() {

            const camera = perspectiveCamera;

            renderer.render(scene, camera);

        }

    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
